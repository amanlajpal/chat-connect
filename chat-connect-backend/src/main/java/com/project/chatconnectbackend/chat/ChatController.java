package com.project.chatconnectbackend.chat;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.messaging.simp.SimpMessageHeaderAccessor;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;

import com.project.chatconnectbackend.dto.MessageDTO;
import com.project.chatconnectbackend.model.Conversation;
import com.project.chatconnectbackend.model.Message;
import com.project.chatconnectbackend.model.User;
import com.project.chatconnectbackend.model.enumValues.MessageStatus;
import com.project.chatconnectbackend.repository.ConversationRepository;
import com.project.chatconnectbackend.repository.MessageRepository;

import jakarta.transaction.Transactional;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.TimeZone;

import javax.validation.constraints.NotNull;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
@Controller
@CrossOrigin(origins = "*")
public class ChatController {

    private static final Logger logger = LoggerFactory.getLogger(ChatController.class);
    @Autowired // This means to get the bean called messageRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private MessageRepository messageRepository;

    @Autowired
    private ConversationRepository conversationRepository;

    @MessageMapping("/chat.sendMessage")
    @SendTo("/topic/public")
    @Transactional
    public MessageDTO sendMessage(@Payload @NotNull MessageDTO messageDTO) { // DTO - Data Transfer Object
        if (messageDTO == null) {
            throw new IllegalArgumentException("Message cannot be null");
        }

        LoggerFactory.getLogger(ChatController.class).info("MessageDTO: " + messageDTO);
        
        Integer sentMessageId= messageRepository.createMessageCustom(
                messageDTO.getMessageText(),
                messageDTO.getFromNumber(),
                messageDTO.getStatus().name(),
                messageDTO.getConversationId());


        // Update the conversation last message and last message time
        // Conversation conversation = conversationRepository.findById(messageDTO.getConversationId()).get();
        // conversation.setLastMessage(messageDTO.getMessageText());
        // conversation.setLastMessageTime(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
        // conversationRepository.save(conversation);

        logger.info("Message sent: " + sentMessageId);
        messageDTO.setId(sentMessageId);
        return messageDTO;
    }

    @MessageMapping("/chat.addUser")
    @SendTo("/topic/public")
    public Chat addUser(
            @Payload User user,
            SimpMessageHeaderAccessor headerAccessor) {
        logger.info("User joined chat connect: " + user.getId() + " " + user.getFirstName() + " " + user.getLastName());
        Map<String, Object> sessionAttributes = headerAccessor.getSessionAttributes();
        if (sessionAttributes != null) {
            sessionAttributes.put("userId", user.getId());
        }
        Chat chat = new Chat();
        chat.setId(user.getId());
        chat.setLastMessage(null);
        chat.setLastMessageTime(null);
        chat.setName(user.getFirstName() + " " + user.getLastName());
        chat.setProfilePhoto(user.getProfilePhoto());
        chat.setPhoneNumber(user.getPhoneNumber());
        chat.setStatus(ChatStatus.JOIN);
        return chat;
    }
}
