package com.project.chatconnectbackend.controller.v1;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.project.chatconnectbackend.chat.Chat;
import com.project.chatconnectbackend.model.User;
import com.project.chatconnectbackend.repository.UserRepository;

// import jakarta.persistence.PersistenceException;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Pattern;

@Validated
@RestController // This means that this class is a Controller
@RequestMapping(path = "/api/v1") // This means URL's start with /api/v1 (after Application path)
public class ControllerV1 {
  @Autowired // This means to get the bean called userRepository
  // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

  @PostMapping(path = "/register", produces = "application/json") // Map ONLY POST Requests
  public @ResponseBody ResponseEntity<Map<String, Object>> registerNewUser(
      @Valid @RequestParam String name,
      @Valid @Pattern(regexp = "\\d{10}", message = "Phone number must be a 10-digit string") @RequestParam String phone,
      @Valid @RequestParam String password) {
    try {
      // @ResponseBody means the returned String is the response, not a view name
      // @RequestParam means it is a parameter from the GET or POST request
      User newUser = new User();
      // Split name by space
      String[] nameParts = name.split(" ");
      String[] avatarUrls = new String[]{
        "https://img.freepik.com/free-psd/3d-illustration-person_23-2149436192.jpg",
        "https://img.freepik.com/free-photo/3d-render-little-boy-with-eyeglasses-blue-shirt_1142-50994.jpg",
        "https://img.freepik.com/free-photo/portrait-boy-blue-cap-glasses-3d-rendering_1142-40451.jpg",
        "https://img.freepik.com/free-photo/3d-cartoon-style-character_23-2151034077.jpg",
        "https://img.freepik.com/premium-photo/happy-3d-cartoon-man-using-laptop-siting-transparent-white-background_973886-19.jpg"
      };

      // Check if name has only one part (no spaces)
      String firstName;
      String lastName;
      if (nameParts.length == 1) {
        firstName = nameParts[0].trim(); // Use entire name as first name
        lastName = ""; // Set last name to empty string
      } else {
        // Use first part as first name and remaining parts as last name
        firstName = nameParts[0].trim();
        lastName = name.substring(name.indexOf(" ") + 1).trim();
      }
      newUser.setFirstName(firstName);
      newUser.setLastName(lastName);
      newUser.setPhoneNumber(phone);
      newUser.setPassword(password);
      newUser.setProfilePhoto(avatarUrls[(int) (Math.random() * avatarUrls.length)]);
      userRepository.save(newUser);

      // Create the response body
      Map<String, Object> responseBody = new HashMap<>();
      responseBody.put("status", "success");
      responseBody.put("data", newUser);
      responseBody.put("message", "User Saved");

      return ResponseEntity.ok(responseBody);
    }
    finally {
     System.out.println("User saved");
    }
  }

  @PostMapping(path = "/login", produces = "application/json") // Map ONLY POST Requests
  public @ResponseBody ResponseEntity<Map<String, Object>> loginUser(
      @Valid @Pattern(regexp = "\\d{10}", message = "Phone number must be a 10-digit string") @RequestParam String phone,
      @Valid @RequestParam String password) {
    try {

      User user = userRepository.findByPhoneNumberAndPassword(phone, password);

      if (user == null) {
        // Handle case where no user is found
        Map<String, Object> errorResponseBody = new HashMap<>();
        errorResponseBody.put("status", "error");
        errorResponseBody.put("message", "User not found");
        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(errorResponseBody);
      }

      // Create the response body
      Map<String, Object> responseBody = new HashMap<>();
      responseBody.put("status", "success");
      responseBody.put("data", user);
      responseBody.put("message", "Logged in successfully");

      return ResponseEntity.ok(responseBody);
    } catch (DataIntegrityViolationException e) {
      // Handle unique constraint violation (e.g., duplicate phone number or email)
      Map<String, Object> errorResponseBody = new HashMap<>();
      errorResponseBody.put("status", "error");
      errorResponseBody.put("message", "User with the provided phone number or email already exists");
      return ResponseEntity.status(HttpStatus.CONFLICT).body(errorResponseBody);
    } catch (EmptyResultDataAccessException e) {
      // Handle case where no user is found
      Map<String, Object> errorResponseBody = new HashMap<>();
      errorResponseBody.put("status", "error");
      errorResponseBody.put("message", "User not found" + e.getMessage());
      return ResponseEntity.status(HttpStatus.NOT_FOUND).body(errorResponseBody);
    } catch (Exception e) {
      // Return an error response if an exception occurs
      Map<String, Object> errorResponseBody = new HashMap<>();
      errorResponseBody.put("status", "error");
      errorResponseBody.put("message", "An error occurred: " + e.getMessage());
      return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponseBody);
    }
  }

  @GetMapping(path = "/allChats", produces = "application/json") // Map ONLY GET Requests
  public @ResponseBody ResponseEntity<Map<String, Object>> getAllUsers() {
    try {
      // This returns a JSON or XML with the users
      // Create the response body
      Iterable<User> users = userRepository.findAll();
      ArrayList<Chat> chats = new ArrayList<>();
      users.forEach(user -> {
        user.setPassword(null);
        chats.add(Chat.builder()
          .fromNumber(user.getPhoneNumber())
          .name(user.getFirstName() + " " + user.getLastName())
          .profilePhoto(user.getProfilePhoto())
          .status(null)
          .lastMessage(null)
          .lastMessageTime(null)
          .build());
      });
      Map<String, Object> responseBody = new HashMap<>();
      responseBody.put("status", "success");
      responseBody.put("data", chats);
      responseBody.put("message", "Users fetched successfully!");

      return ResponseEntity.ok(responseBody);
    } catch (DataIntegrityViolationException e) {
      // Handle unique constraint violation (e.g., duplicate phone number or email)
      Map<String, Object> errorResponseBody = new HashMap<>();
      errorResponseBody.put("status", "error");
      errorResponseBody.put("message", "User with the provided phone number or email already exists");
      return ResponseEntity.status(HttpStatus.CONFLICT).body(errorResponseBody);
    } catch (EmptyResultDataAccessException e) {
      // Handle case where no user is found
      Map<String, Object> errorResponseBody = new HashMap<>();
      errorResponseBody.put("status", "error");
      errorResponseBody.put("message", "User not found" + e.getMessage());
      return ResponseEntity.status(HttpStatus.NOT_FOUND).body(errorResponseBody);
    } catch (Exception e) {
      // Return an error response if an exception occurs
      Map<String, Object> errorResponseBody = new HashMap<>();
      errorResponseBody.put("status", "error");
      errorResponseBody.put("message", "An error occurred: " + e.getMessage());
      return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponseBody);
    }
  }
}