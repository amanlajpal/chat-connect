package com.project.chatconnectbackend.controller.v1;

import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.project.chatconnectbackend.model.User;
import com.project.chatconnectbackend.repository.UserRepository;

@RestController // This means that this class is a Controller
@RequestMapping(path = "/api/v1") // This means URL's start with /api/v1 (after Application path)
public class ControllerV1 {
  @Autowired // This means to get the bean called userRepository
  // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

  @PostMapping(path = "/register") // Map ONLY POST Requests
  public @ResponseBody ResponseEntity<Map<String, Object>> registerNewUser(
      @RequestParam String name,
      @RequestParam String phone_number,
      @RequestParam String password) {
    try {
      // @ResponseBody means the returned String is the response, not a view name
      // @RequestParam means it is a parameter from the GET or POST request
      User newUser = new User();
      newUser.setFirst_name(name.split(" ")[0].trim());
      newUser.setLast_name(name.split(" ")[1].trim());
      newUser.setPhone_number(phone_number);
      newUser.setPassword(password);
      newUser.setProfile_photo("default.jpg");
      userRepository.save(newUser);

      // Create the response body
      Map<String, Object> responseBody = new HashMap<>();
      responseBody.put("status", "success");
      responseBody.put("data", newUser);
      responseBody.put("message", "User Saved");

      return ResponseEntity.ok(responseBody);
    } catch (Exception e) {
      // Return an error response if an exception occurs
      Map<String, Object> errorResponseBody = new HashMap<>();
      errorResponseBody.put("status", "error");
      errorResponseBody.put("message", "An error occurred: " + e.getMessage());
      return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponseBody);
    }
  }

  @GetMapping(path = "/all")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }
}