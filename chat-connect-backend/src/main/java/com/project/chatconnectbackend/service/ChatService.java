package com.project.chatconnectbackend.service;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.project.chatconnectbackend.dto.Chat;
import com.project.chatconnectbackend.dto.GetAllChatsServiceResponseDTO;
import com.project.chatconnectbackend.dto.GetAllMessagesBetweenUsersServiceResponseDTO;
import com.project.chatconnectbackend.dto.ResponseDTO;
import com.project.chatconnectbackend.enumValues.ResponseStatus;
import com.project.chatconnectbackend.model.Conversation;
import com.project.chatconnectbackend.model.GroupMember;
import com.project.chatconnectbackend.model.Message;
import com.project.chatconnectbackend.model.User;
import com.project.chatconnectbackend.repository.ConversationRepository;
import com.project.chatconnectbackend.repository.GroupMemberRepository;
import com.project.chatconnectbackend.repository.MessageRepository;
import com.project.chatconnectbackend.repository.UserRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class ChatService {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired // This means to get the bean called conversationRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ConversationRepository conversationRepository;

    @Autowired // This means to get the bean called messageRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private MessageRepository messageRepository;

    @Autowired // This means to get the bean called groupMemberRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private GroupMemberRepository groupMemberRepository;

    public ResponseDTO getAllChats() {
        try {
            Iterable<User> users = userRepository.findAll();
            ArrayList<Chat> chats = new ArrayList<>();
            users.forEach(user -> {
                user.setPassword(null); // Remove password from the response
                chats.add(Chat.builder()
                        .phoneNumber(user.getPhoneNumber())
                        .name(user.getFirstName() + " " + user.getLastName())
                        .profilePhoto(user.getProfilePhoto())
                        .status(null)
                        .lastMessage(null)
                        .lastMessageTime(null)
                        .id(user.getId())
                        .build());
            });
            GetAllChatsServiceResponseDTO responseData = GetAllChatsServiceResponseDTO
                    .builder()
                    .chats(chats)
                    .build();
            return ResponseDTO.builder()
                    .status(ResponseStatus.success)
                    .data(responseData)
                    .message("Chats fetched successfully!")
                    .build();
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseDTO.builder()
                    .status(ResponseStatus.error)
                    .data(null)
                    .message("Fetching chats failed!")
                    .build();
        }
    }

    public ResponseDTO getAllMessagesBetweenUsers(String userId1, String userId2) {
        try {
            // Create the response body
            Integer[] userIdsForMessages = new Integer[] { Integer.parseInt(userId1), Integer.parseInt(userId2) };
            List<Map<String, Object>> foundConversations = conversationRepository
                    .findDirectConversationBetweenUsers("direct", userIdsForMessages[0], userIdsForMessages[1]);
            Integer foundConversationId = foundConversations.size() > 0
                    ? (Integer) ((Map<String, Object>) foundConversations.get(0)).get("conversation_id")
                    : null;
            if (foundConversationId != null) {
                List<Message> foundMessages = messageRepository.findMessagesByConversationId(foundConversationId);
                GetAllMessagesBetweenUsersServiceResponseDTO responseData = GetAllMessagesBetweenUsersServiceResponseDTO
                        .builder()
                        .conversationId(foundConversationId)
                        .messages(foundMessages)
                        .fromUserId(userIdsForMessages[0])
                        .toUserId(userIdsForMessages[1])
                        .build();
                if (foundMessages.isEmpty()) {
                    return ResponseDTO.builder()
                            .status(ResponseStatus.success)
                            .data(responseData)
                            .message("No messages found between users")
                            .build();
                } else {
                    return ResponseDTO.builder()
                            .status(ResponseStatus.success)
                            .data(responseData)
                            .message("Messages fetched successfully!")
                            .build();
                }
            } else {
                Conversation newConversation = new Conversation();
                newConversation.setConversationName("direct");
                Conversation createdConversation = conversationRepository.save(newConversation);
                Set<GroupMember> createdGroupMembers = new HashSet<>();
                for (Integer userId : userIdsForMessages) {
                    GroupMember groupMember = new GroupMember();
                    groupMember.setConversation(createdConversation);
                    Optional<User> user = userRepository.findById(Objects.requireNonNull(userId));
                    if (user.isPresent()) {
                        groupMember.setUsers(user.get()); // Pass the actual User object instead of Optional<User>
                    }
                    GroupMember createdGroupMember = groupMemberRepository.save(groupMember);
                    createdGroupMembers.add(createdGroupMember);
                }
                GetAllMessagesBetweenUsersServiceResponseDTO responseData = GetAllMessagesBetweenUsersServiceResponseDTO
                        .builder()
                        .conversationId(createdConversation.getId())
                        .messages(new ArrayList<>())
                        .fromUserId(userIdsForMessages[0])
                        .toUserId(userIdsForMessages[1])
                        .build();
                return ResponseDTO.builder()
                        .status(ResponseStatus.success)
                        .data(responseData)
                        .message("No messages found between users")
                        .build();
            }
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseDTO.builder()
                    .status(ResponseStatus.error)
                    .data(null)
                    .message("Get messages between users failed!")
                    .build();
        }
    }
}
